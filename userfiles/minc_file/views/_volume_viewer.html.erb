
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%= stylesheet_link_tag    MincFile.public_path("stylesheets/volume_viewer.css").to_s, :media => "all" %>
<%= javascript_include_tag MincFile.public_path("javascripts/brainbrowser.volume-viewer.min.js").to_s %>

<div id="brainbrowser-wrapper">
  <div id="volume-viewer">
    <div id="global-controls" class="volume-viewer-controls">
      <span id="brainbrowser_volume_screenshot" class="button">Screenshot</span>
    </div>

    <div id="brainbrowser-volume"></div>
    <div id="display">
      <div id="loading" style="display: none"><img src="/images/brainbrowser-loader.gif" /></div>
    </div>

    <div class="volume-viewer-controls volume-controls">

      <div class="coords">
        <div class="control-heading" id="voxel-coordinates-heading-0">
          Voxel Coordinates:
        </div>
        <div class="voxel-coords" data-volume-id="0">
          I:<input id="voxel-i-0" class="control-inputs">
          J:<input id="voxel-j-0" class="control-inputs">
          K:<input id="voxel-k-0" class="control-inputs">
        </div>
        <div class="control-heading" id="world-coordinates-heading-0">
          World Coordinates:
        </div>
        <div class="world-coords" data-volume-id="0">
          X:<input id="world-x-0" class="control-inputs">
          Y:<input id="world-y-0" class="control-inputs">
          Z:<input id="world-z-0" class="control-inputs">
        </div>
      </div>

      <div id="color-map-0">
        <span class="control-heading" id="color-map-heading-0">
          Color Map:
        </span>
      </div>

      <div class="threshold-div" data-volume-id="0">
        <div class="control-heading">
          Threshold:
        </div>
        <div class="thresh-inputs">
          <input id="min-threshold-0" class="control-inputs thresh-input-left" value="0"/>
          <input id="max-threshold-0" class="control-inputs thresh-input-right" value="255"/>
        </div>
        <div class="slider volume-viewer-threshold" id="threshold-slider-0"></div>
      </div>

      <div id="time-0" class="time-div" data-volume-id="0" style="display:none">
        <span class="control-heading">Time:</span>
        <input class="control-inputs" value="0" id="time-val-0"/>
        <div class="slider volume-viewer-threshold" id="threshold-time-slider-0"></div>
        <input type="checkbox" class="button" id="play-0"><label for="play-0">Play</label>
      </div>

      <div id="slice-series-0" class="slice-series-div" data-volume-id="0">
        <div class="control-heading" id="slice-series-heading-0">All slices: </div>
        <span class="slice-series-button button" data-axis="xspace">Sagittal</span>
        <span class="slice-series-button button" data-axis="yspace">Coronal</span>
        <span class="slice-series-button button" data-axis="zspace">Transverse</span>
      </div>

    </div>
  </div>
</div>

<script type="text/javascript">
  BrainBrowser.VolumeViewer.start("brainbrowser-volume", function(viewer) {
    var loading_div = $("#loading");

    BrainBrowser.config.set("color_maps", [
      {
        name: "Gray",
        url: "<%= @userfile.public_path("color_maps/gray-scale.txt") %>",
        cursor_color: "#FF0000"
      },
      {
        name: "Spectral",
        url: "<%= @userfile.public_path("color_maps/spectral-brainview.txt") %>",
        cursor_color: "#FFFFFF"
      },
    ]);

    $("#brainbrowser_volume_screenshot").click(function() {
      var width        = 0;
      var height       = 0;
      var active_panel = viewer.active_panel;

      // Create a canvas on which we'll draw the images.
      var canvas  = document.createElement("canvas");
      var context = canvas.getContext("2d");
      var img     = new Image();

      viewer.volumes.forEach(function(volume) {
        volume.display.forEach(function(panel) {
          width   = Math.max(width,  panel.canvas.width);
          height  = Math.max(height, panel.canvas.height);
        });
      });

      canvas.width      = width * viewer.volumes.length;
      canvas.height     = height * 3;
      context.fillStyle = "#000000";
      context.fillRect(0, 0, canvas.width, canvas.height);

      // The active canvas is highlighted by the viewer,
      // so we set it to null and redraw the highlighting
      // isn't shown in the image.
      if (active_panel) {
        active_panel.updated = true;
        viewer.active_panel  = null;
        viewer.draw();
      }

      viewer.volumes.forEach(function(volume, x) {
        volume.display.forEach(function(panel, axis_name, y) {
          context.drawImage(panel.canvas, x * width, y * height);
        });
      });

      // Restore the active canvas.
      if (active_panel) {
        active_panel.updated = true;
        viewer.active_panel  = active_panel;
        viewer.draw();
      }

      // Show the created image in a dialog box.
      img.onload = function() {
        $("<div></div>").append(img).dialog({
          title: "Slices",
          height: img.height,
          width:  img.width
        });
      };

      img.src = canvas.toDataURL();
    });

    viewer.addEventListener("volumeuiloaded", function(event) {
      var volume    = event.volume;
      var vol_id    = event.volume_id;

      $(".button").button();

     // The world coordinate input fields.
      $(".world-coords").change(function() {
        var div = $(this);

        var x = parseFloat(div.find("#world-x-" + vol_id).val());
        var y = parseFloat(div.find("#world-y-" + vol_id).val());
        var z = parseFloat(div.find("#world-z-" + vol_id).val());

        // Make sure the values are numeric.
        if (!BrainBrowser.utils.isNumeric(x)) {
          x = 0;
        }
        if (!BrainBrowser.utils.isNumeric(y)) {
          y = 0;
        }
        if (!BrainBrowser.utils.isNumeric(z)) {
          z = 0;
        }

        // Set coordinates and redraw.
        viewer.volumes[vol_id].setWorldCoords(x, y, z);

        viewer.redrawVolumes();
      });

      // The voxel coordinate input fields.
      $(".voxel-coords").change(function() {
        var div = $(this);

        var i = parseInt(div.find("#voxel-i-" + vol_id).val(), 10);
        var j = parseInt(div.find("#voxel-j-" + vol_id).val(), 10);
        var k = parseInt(div.find("#voxel-k-" + vol_id).val(), 10);

        // Make sure the values are numeric.
        if (!BrainBrowser.utils.isNumeric(i)) {
          i = 0;
        }
        if (!BrainBrowser.utils.isNumeric(j)) {
          j = 0;
        }
        if (!BrainBrowser.utils.isNumeric(k)) {
          k = 0;
        }

        // Set coordinates and redraw.
        viewer.volumes[vol_id].setVoxelCoords(i, j, k);

        viewer.redrawVolumes();
      });

      // Color map URLs are read from the config file and added to the
      // color map select box.
      var color_map_select = $('<select id="color-map-select"></select>').change(function() {
        var selection = $(this).find(":selected");
        viewer.loadVolumeColorMapFromURL(vol_id, selection.val(), selection.data("cursor-color"), function() {
          viewer.redrawVolumes();
        });
      });

      BrainBrowser.config.get("color_maps").forEach(function(color_map) {
        color_map_select.append('<option value="' + color_map.url +
          '" data-cursor-color="' + color_map.cursor_color + '">' +
          color_map.name +'</option>'
        );
      });

      $("#color-map-" + vol_id).append(color_map_select);


      // Change the range of intensities that will be displayed.
      $(".threshold-div").each(function() {
        var div = $(this);

        // Input fields to input min and max thresholds directly.
        var min_input = div.find("#min-threshold-" + vol_id);
        var max_input = div.find("#max-threshold-" + vol_id);

        // Slider to modify min and max thresholds.
        var slider = div.find(".slider");

        slider.slider({
          range: true,
          min: 0,
          max: 255,
          values: [0, 255],
          step: 1,
          slide: function(event, ui){
            var values = ui.values;

            // Update the input fields.
            min_input.val(values[0]);
            max_input.val(values[1]);

            // Update the volume and redraw.
            volume.intensity_min = values[0];
            volume.intensity_max = values[1];
            viewer.redrawVolumes();
          },
          stop: function() {
            $(this).find("a").blur();
          }
        });

        // Input field for minimum threshold.
        min_input.change(function() {
          var value = parseFloat(this.value);

          // Make sure input is numeric and in range.
          if (!BrainBrowser.utils.isNumeric(value)) {
            value = 0;
          }
          value = Math.max(0, Math.min(value, 255));
          this.value = value;

          // Update the slider.
          slider.slider("values", 0, value);

          // Update the volume and redraw.
          volume.min = value;
          viewer.redrawVolumes();
        });

        max_input.change(function() {
          var value = parseFloat(this.value);

          // Make sure input is numeric and in range.
          if (!BrainBrowser.utils.isNumeric(value)) {
            value = 255;
          }
          value = Math.max(0, Math.min(value, 255));
          this.value = value;

          // Update the slider.
          slider.slider("values", 1, value);

          // Update the volume and redraw.
          volume.max = value;
          viewer.redrawVolumes();
        });

      });


      if (volume.data.time) {

        $(".time-div").each(function() {
          var div = $(this);

          if (volume.data.time) {
            div.show();
          } else {
            return;
          }

          var slider = div.find(".slider");
          var time_input = div.find("#time-val-" + vol_id);
          var play_button = div.find("#play-" + vol_id);

          var min = 0;
          var max = volume.data.time.space_length - 1;
          var play_interval;

          slider.slider({
            min: min,
            max: max,
            value: 0,
            step: 1,
            slide: function(event, ui) {
              var value = +ui.value;
              time_input.val(value);
              volume.current_time = value;
              viewer.redrawVolumes();
            },
            stop: function() {
              $(this).find("a").blur();
            }
          });

          time_input.change(function() {
            var value = parseInt(this.value, 10);
            if (!BrainBrowser.utils.isNumeric(value)) {
              value = 0;
            }

            value = Math.max(min, Math.min(value, max));

            this.value = value;
            time_input.val(value);
            slider.slider("value", value);
            volume.current_time = value;
            viewer.redrawVolumes();
          });

          play_button.change(function() {
            if(play_button.is(":checked")){
              clearInterval(play_interval);
              play_interval = setInterval(function() {
                var value = volume.current_time + 1;
                value = value > max ? 0 : value;
                volume.current_time = value;
                time_input.val(value);
                slider.slider("value", value);
                viewer.redrawVolumes();
              }, 200);
            } else {
              clearInterval(play_interval);
            }
          });

        });

      }

      // Create an image of all slices in a certain
      // orientation.
      $(".slice-series-div").each(function() {
        var div = $(this);

        var space_names = {
          xspace: "Sagittal",
          yspace: "Coronal",
          zspace: "Transverse"
        };

        div.find(".slice-series-button").click(function() {
          var axis_name = $(this).data("axis");
          var axis = volume.header[axis_name];
          var space_length = axis.space_length;
          var time = volume.current_time;
          var per_column = 10;
          var zoom = 0.5;
          var i, x, y;

          // Canvas on which to draw the images.
          var canvas = document.createElement("canvas");
          var context = canvas.getContext("2d");

          // Get first slice to set dimensions of the canvas.
          var image_data = volume.getSliceImage(volume.slice(axis_name, 0, time), zoom);
          var img = new Image();
          canvas.width = per_column * image_data.width;
          canvas.height = Math.ceil(space_length / per_column) * image_data.height;
          context.fillStyle = "#000000";
          context.fillRect(0, 0, canvas.width, canvas.height);

          // Draw the slice on the canvas.
          context.putImageData(image_data, 0, 0);

          // Draw the rest of the slices on the canvas.
          for (i = 1; i < space_length; i++) {
            image_data = volume.getSliceImage(volume.slice(axis_name, i, time), zoom);
            x = i % per_column * image_data.width;
            y = Math.floor(i / per_column) * image_data.height;
            context.putImageData(image_data, x, y);
          }

          // Retrieve image from canvas and display it
          // in a dialog box.
          img.onload = function() {
            $("<div></div>").append(img).dialog({
              title: space_names[axis_name] + " Slices",
              height: 600,
              width: img.width
            });
          };

          img.src = canvas.toDataURL();
        });
      });

    });

    /////////////////////////////////////////////////////
    // UI updates to be performed after each slice update.
    //////////////////////////////////////////////////////
    viewer.addEventListener("sliceupdate", function(event) {
      var panel  = event.target;
      var volume = event.volume;
      var vol_id = panel.volume_id;
      var value;

      if (BrainBrowser.utils.isFunction(volume.getWorldCoords)) {
        world_coords = volume.getWorldCoords();
        $("#world-x-" + vol_id).val(world_coords.x.toPrecision(6));
        $("#world-y-" + vol_id).val(world_coords.y.toPrecision(6));
        $("#world-z-" + vol_id).val(world_coords.z.toPrecision(6));
      }

      if (BrainBrowser.utils.isFunction(volume.getVoxelCoords)) {
        voxel_coords = volume.getVoxelCoords();
        $("#voxel-i-" + vol_id).val(parseInt(voxel_coords.i, 10));
        $("#voxel-j-" + vol_id).val(parseInt(voxel_coords.j, 10));
        $("#voxel-k-" + vol_id).val(parseInt(voxel_coords.k, 10));
      }

      value = volume.getIntensityValue();
      $("#intensity-value-" + vol_id)
      .css("background-color", "#" + volume.color_map.colorFromValue(value, {
        hex: true,
        min: volume.min,
        max: volume.max,
        contrast: panel.contrast,
        brightness: panel.brightness
      }))
      .html(Math.floor(value));

      if (volume.data && volume.data.time) {
        $("#time-slider-" + vol_id).slider("option", "value", volume.current_time);
        $("#time-val-" + vol_id).val(volume.current_time);
      }
    });

    var color_map_config = BrainBrowser.config.get("color_maps")[0];

    loading_div.show();

    //////////////////////////////
    // Load the default color map.
    //////////////////////////////
    viewer.loadDefaultColorMapFromURL(color_map_config.url, color_map_config.cursor_color);

    ////////////////////////////////////////
    // Set the size of slice display panels.
    ////////////////////////////////////////
    viewer.setDefaultPanelSize(256, 256);

    ///////////////////
    // Start rendering.
    ///////////////////
    viewer.render();

    /////////////////////
    // Load the volumes.
    /////////////////////
    viewer.loadVolumes({
      volumes: [
        {
          type: "minc",
          header_url:   "<%=
            viewer_userfile_url(@userfile,
              :action       => :content,
              :page_type    => :bare,
              :query_params => { :content_loader => :get_headers_to_json }
            ).html_safe
          %>",
          raw_data_url: "<%=
            viewer_userfile_url(@userfile,
              :action       => :content,
              :page_type    => :bare,
              :query_params => { :content_loader => :get_raw_data }
            ).html_safe
          %>",
        },
      ],
      complete: function() {
        loading_div.hide();
        $("#brainbrowser-wrapper").slideDown({duration: 600});
      }
    });
  });
</script>
